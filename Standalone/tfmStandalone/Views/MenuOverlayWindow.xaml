<Window
	x:Class="tfmStandalone.Views.MenuOverlayWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:tfmStandalone="clr-namespace:tfmStandalone" xmlns:views="clr-namespace:tfmStandalone.Views"
	Name="Window"
	WindowStyle="None"
	AllowsTransparency="True"
	Background="#00FFFFFF"
	ShowInTaskbar="False"
	Title="CommunityOverlayWindow"
	SizeToContent="WidthAndHeight"
	Deactivated="OnDeactivated">
	<FrameworkElement.Resources>
		<ResourceDictionary>
			<views:InverseBooleanConverter
				x:Key="InverseBooleanConverter" />
		</ResourceDictionary>
	</FrameworkElement.Resources>
	<Border
		Background="#66000000"
		CornerRadius="0,0,10,0"
		MouseLeave="OnMouseLeave">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<Border
				Width="24"
				Height="24"
				Margin="4"
				Cursor="Hand"
				Background="#00FFFFFF"
				VerticalAlignment="Top">
				<UIElement.InputBindings>
					<MouseBinding
						MouseAction="LeftClick"
						Command="{Binding ToggleViewCommand}" />
				</UIElement.InputBindings>
				<Image
					Source="../Resources/Images/Menu.png"
					Width="16"
					Height="16" />
			</Border>
			<StackPanel
				Grid.Column="1"
				Margin="10,2">
				<FrameworkElement.Style>
					<Style
						TargetType="{x:Type StackPanel}">
						<Setter
							Property="Visibility"
							Value="Collapsed" />
						<Style.Triggers>
							<DataTrigger
								Value="False"
								Binding="{Binding IsCollapsed}">
								<Setter
									Property="Visibility"
									Value="Visible" />
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</FrameworkElement.Style>
				<FrameworkElement.Resources>
					<ResourceDictionary>
						<Style
							TargetType="{x:Type ButtonBase}"
							x:Key="{x:Type ButtonBase}">
							<Setter
								Property="Foreground"
								Value="#FFFFFFFF" />
							<Setter
								Property="Template">
								<Setter.Value>
									<ControlTemplate
										TargetType="{x:Type ButtonBase}">
										<Border
											Name="border"
											SnapsToDevicePixels="True"
											Background="#00FFFFFF">
											<ContentPresenter
												Name="contentPresenter"
												Content="{TemplateBinding Content}"
												HorizontalAlignment="Center"
												Margin="16,6"
												ContentStringFormat="{TemplateBinding ContentStringFormat}"
												Focusable="False" />
										</Border>
										<ControlTemplate.Triggers>
											<Trigger
												Property="UIElement.IsMouseOver"
												Value="True">
												<Setter
													TargetName="border"
													Property="Background"
													Value="#44000000" />
											</Trigger>
											<Trigger
												Property="IsPressed"
												Value="True">
												<Setter
													TargetName="border"
													Property="Background"
													Value="#66000000" />
											</Trigger>
											<Trigger
												Property="ToggleButton.IsChecked"
												Value="True">
												<Setter
													TargetName="border"
													Property="Background"
													Value="#44000000" />
											</Trigger>
										</ControlTemplate.Triggers>
									</ControlTemplate>
								</Setter.Value>
							</Setter>
						</Style>
					</ResourceDictionary>
				</FrameworkElement.Resources>
				<ToggleButton
					Name="AlignmentToggleButton"
					Style="{StaticResource ButtonBase}"
					Content="Alignment"
					IsHitTestVisible="{Binding ElementName=AlignmentPopup, Path=IsOpen, Converter={StaticResource InverseBooleanConverter}}" />
				<Popup
					Name="AlignmentPopup"
					HorizontalOffset="10"
					Placement="Right"
					PopupAnimation="Fade"
					AllowsTransparency="True"
					StaysOpen="False"
					PlacementTarget="{Binding ElementName=AlignmentToggleButton}"
					IsOpen="{Binding ElementName=AlignmentToggleButton, Path=IsChecked}">
					<Border
						Background="#66000000">
						<ItemsControl
							ItemsSource="{Binding AlignmentModes}">
							<ItemsControl.ItemTemplate>
								<DataTemplate
									DataType="{x:Type tfmStandalone:AlignmentModeViewModel}">
									<DockPanel>
										<Border
											DockPanel.Dock="Left"
											Background="#22000000">
											<TextBlock
												Name="SelectedCheck"
												Text="✓"
												Foreground="#FFFFFFFF"
												HorizontalAlignment="Center"
												VerticalAlignment="Center"
												Margin="4" />
										</Border>
										<Button
											Style="{StaticResource ButtonBase}"
											Content="{Binding Display}"
											Command="{Binding ElementName=Window, Path=DataContext.SetAlignmentModeCommand}"
											CommandParameter="{Binding}" />
									</DockPanel>
									<DataTemplate.Triggers>
										<DataTrigger
											Value="False"
											Binding="{Binding IsSelected}">
											<Setter
												TargetName="SelectedCheck"
												Property="Visibility"
												Value="Hidden" />
										</DataTrigger>
									</DataTemplate.Triggers>
								</DataTemplate>
							</ItemsControl.ItemTemplate>
						</ItemsControl>
					</Border>
				</Popup>
				<ToggleButton
					Name="ZoomToggleButton"
					Style="{StaticResource ButtonBase}"
					Content="Zoom"
					IsHitTestVisible="{Binding ElementName=ZoomPopup, Path=IsOpen, Converter={StaticResource InverseBooleanConverter}}" />
				<Popup
					Name="ZoomPopup"
					HorizontalOffset="10"
					Placement="Right"
					PopupAnimation="Fade"
					AllowsTransparency="True"
					StaysOpen="False"
					PlacementTarget="{Binding ElementName=ZoomToggleButton}"
					IsOpen="{Binding ElementName=ZoomToggleButton, Path=IsChecked}">
					<Border
						Background="#66000000">
						<ItemsControl
							ItemsSource="{Binding ZoomModes}">
							<ItemsControl.ItemTemplate>
								<DataTemplate
									DataType="{x:Type tfmStandalone:ZoomModeViewModel}">
									<DockPanel>
										<Border
											DockPanel.Dock="Left"
											Background="#22000000">
											<TextBlock
												Name="SelectedCheck"
												Text="✓"
												Foreground="#FFFFFFFF"
												HorizontalAlignment="Center"
												VerticalAlignment="Center"
												Margin="4" />
										</Border>
										<Button
											Style="{StaticResource ButtonBase}"
											Content="{Binding Display}"
											Command="{Binding ElementName=Window, Path=DataContext.SetZoomModeCommand}"
											CommandParameter="{Binding}" />
									</DockPanel>
									<DataTemplate.Triggers>
										<DataTrigger
											Value="False"
											Binding="{Binding IsSelected}">
											<Setter
												TargetName="SelectedCheck"
												Property="Visibility"
												Value="Hidden" />
										</DataTrigger>
									</DataTemplate.Triggers>
								</DataTemplate>
							</ItemsControl.ItemTemplate>
						</ItemsControl>
					</Border>
				</Popup>
				<ToggleButton
					Name="QualityToggleButton"
					Style="{StaticResource ButtonBase}"
					Content="Quality"
					IsHitTestVisible="{Binding ElementName=QualityPopup, Path=IsOpen, Converter={StaticResource InverseBooleanConverter}}" />
				<Popup
					Name="QualityPopup"
					HorizontalOffset="10"
					Placement="Right"
					PopupAnimation="Fade"
					AllowsTransparency="True"
					StaysOpen="False"
					PlacementTarget="{Binding ElementName=QualityToggleButton}"
					IsOpen="{Binding ElementName=QualityToggleButton, Path=IsChecked}">
					<Border
						Background="#66000000">
						<ItemsControl
							ItemsSource="{Binding Qualities}">
							<ItemsControl.ItemTemplate>
								<DataTemplate
									DataType="{x:Type tfmStandalone:QualityViewModel}">
									<DockPanel>
										<Border
											DockPanel.Dock="Left"
											Background="#22000000">
											<TextBlock
												Name="SelectedCheck"
												Text="✓"
												Foreground="#FFFFFFFF"
												HorizontalAlignment="Center"
												VerticalAlignment="Center"
												Margin="4" />
										</Border>
										<Button
											Style="{StaticResource ButtonBase}"
											Content="{Binding Display}"
											Command="{Binding ElementName=Window, Path=DataContext.SetQualityCommand}"
											CommandParameter="{Binding}" />
									</DockPanel>
									<DataTemplate.Triggers>
										<DataTrigger
											Value="False"
											Binding="{Binding IsSelected}">
											<Setter
												TargetName="SelectedCheck"
												Property="Visibility"
												Value="Hidden" />
										</DataTrigger>
									</DataTemplate.Triggers>
								</DataTemplate>
							</ItemsControl.ItemTemplate>
						</ItemsControl>
					</Border>
				</Popup>
				<Border
					BorderThickness="0,1,0,0"
					BorderBrush="#44FFFFFF"
					Margin="0,2" />
				<Button
					Content="Settings"
					Style="{StaticResource ButtonBase}"
					Command="{Binding OpenSettingsCommand}" />
			</StackPanel>
		</Grid>
	</Border>
</Window>
