<local:PinnableWindow
	x:Class="tfmStandalone.ChatWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:tfmStandalone" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:system="clr-namespace:System;assembly=mscorlib"
	Name="Window"
	Loaded="HandleLoaded"
	Activated="HandleActivated"
	Height="400"
	Width="600"
	Icon="../Resources/Images/chat.ico"
	FontFamily="{Binding FontFamily}"
	FontSize="{Binding FontSize}">
	<FrameworkElement.Style>
		<Style
			BasedOn="{StaticResource PinnableWindowStyle}"
			TargetType="{x:Type local:PinnableWindow}">
			<Setter
				Property="Window.Title"
				Value="{Binding Username, StringFormat=Chat ({0})}" />
			<Style.Triggers>
				<DataTrigger
					Value="{x:Static system:String.Empty}"
					Binding="{Binding Username}">
					<Setter
						Property="Window.Title"
						Value="Chat" />
				</DataTrigger>
				<DataTrigger
					Binding="{Binding Username}"
					Value="{x:Null}">
					<Setter
						Property="Window.Title"
						Value="Chat" />
				</DataTrigger>
			</Style.Triggers>
		</Style>
	</FrameworkElement.Style>
	<FrameworkElement.Resources>
		<ResourceDictionary>
			<BooleanToVisibilityConverter
				x:Key="BooleanToVisibilityConverter" />
			<local:HexStringToSolidColorBrushConverter
				x:Key="HexStringToSolidColorBrushConverter" />
			<local:HexStringToColorConverter
				x:Key="HexStringToColorConverter" />
			<Style
				TargetType="{x:Type GridSplitter}"
				x:Key="GridSplitterStyle">
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type GridSplitter}">
							<Grid
								SnapsToDevicePixels="True">
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition />
								</Grid.ColumnDefinitions>
								<Border
									Grid.Column="0"
									BorderBrush="{DynamicResource ChatWindowGridSplitterLeftColor}"
									BorderThickness="{DynamicResource ChatWindowGridSplitterLeftThickness}"
									Background="#00FFFFFF"
									Margin="0,4" />
								<Border
									Grid.Column="1"
									BorderBrush="{DynamicResource ChatWindowGridSplitterRightColor}"
									BorderThickness="{DynamicResource ChatWindowGridSplitterRightThickness}"
									Background="#00FFFFFF"
									Margin="0,4" />
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</ResourceDictionary>
	</FrameworkElement.Resources>
	<Grid>
		<Grid.ColumnDefinitions>
			<ColumnDefinition
				Width="140"
				MinWidth="100"
				MaxWidth="220" />
			<ColumnDefinition
				Width="5" />
			<ColumnDefinition
				Width="*" />
		</Grid.ColumnDefinitions>
		<DockPanel
			Grid.Column="0">
			<DockPanel
				Dock="Bottom"
				Margin="4"
				LastChildFill="False">
				<local:ImageButton
					DockPanel.Dock="Left"
					Width="20"
					Height="20"
					Margin="0,0,4,0"
					ImageWidth="12"
					ImageHeight="12"
					Image="{DynamicResource ChatWindowReopenImageSource}"
					ImageHover="{DynamicResource ChatWindowReopenHoverImageSource}"
					ImagePressed="{DynamicResource ChatWindowReopenPressedImageSource}"
					Command="{Binding ReopenChatCommand}" />
				<local:ImageButton
					DockPanel.Dock="Right"
					Width="20"
					Height="20"
					ImageWidth="14"
					ImageHeight="14"
					Image="{DynamicResource ChatWindowGearImageSource}"
					ImageHover="{DynamicResource ChatWindowGearHoverImageSource}"
					ImagePressed="{DynamicResource ChatWindowGearPressedImageSource}"
					Command="{Binding OpenSettingsCommand}" />
				<local:ImageButton
					DockPanel.Dock="Right"
					Width="20"
					Height="20"
					Margin="0,0,4,0"
					ImageWidth="12"
					ImageHeight="12"
					Image="{DynamicResource ChatWindowAddImageSource}"
					ImageHover="{DynamicResource ChatWindowAddHoverImageSource}"
					ImagePressed="{DynamicResource ChatWindowAddPressedImageSource}"
					Command="{Binding NewChatCommand}" />
			</DockPanel>
			<ListBox
				Margin="5"
				Background="#00FFFFFF"
				BorderThickness="0"
				ItemsSource="{Binding Chats}"
				SelectedItem="{Binding SelectedChat, Mode=TwoWay}"
				PreviewMouseRightButtonDown="HandleRightMouseDown">
				<FrameworkElement.Resources>
					<ResourceDictionary>
						<Style
							TargetType="{x:Type ListBoxItem}"
							x:Key="{x:Type ListBoxItem}">
							<Setter
								Property="UIElement.SnapsToDevicePixels"
								Value="True" />
							<Setter
								Property="FrameworkElement.OverridesDefaultStyle"
								Value="True" />
							<Setter
								Property="Foreground"
								Value="{DynamicResource ChatWindowChatTabForegroundColor}" />
							<Setter
								Property="FrameworkElement.FocusVisualStyle"
								Value="{x:Null}" />
							<Setter
								Property="Template">
								<Setter.Value>
									<ControlTemplate
										TargetType="{x:Type ListBoxItem}">
										<Border
											Name="Border"
											SnapsToDevicePixels="True"
											Background="#00FFFFFF"
											CornerRadius="{DynamicResource ChatWindowChatTabCornerRadius}">
											<ContentPresenter />
										</Border>
									</ControlTemplate>
								</Setter.Value>
							</Setter>
						</Style>
					</ResourceDictionary>
				</FrameworkElement.Resources>
				<ItemsControl.ItemTemplate>
					<DataTemplate
						DataType="{x:Type local:ChatViewModel}">
						<Border
							Name="ChatTabBorder"
							CornerRadius="{DynamicResource ChatWindowChatTabCornerRadius}"
							HorizontalAlignment="Stretch"
							Margin="0,0,0,1">
							<FrameworkElement.Style>
								<Style
									TargetType="{x:Type Border}">
									<Setter
										Property="Background">
										<Setter.Value>
											<LinearGradientBrush
												StartPoint="0,0.5"
												EndPoint="1,0.5">
												<GradientStop
													Offset="0.25"
													Color="{Binding TabColor, Converter={StaticResource HexStringToColorConverter}}" />
												<GradientStop
													Color="Transparent"
													Offset="0.75" />
											</LinearGradientBrush>
										</Setter.Value>
									</Setter>
									<Style.Triggers>
										<MultiDataTrigger>
											<MultiDataTrigger.Conditions>
												<Condition
													Value="True"
													Binding="{Binding IsPinned}" />
												<Condition
													Value="True"
													Binding="{Binding IsWhisper}" />
											</MultiDataTrigger.Conditions>
											<Setter
												Property="Margin"
												Value="6,0,0,0" />
										</MultiDataTrigger>
									</Style.Triggers>
								</Style>
							</FrameworkElement.Style>
							<UIElement.InputBindings>
								<MouseBinding
									Gesture="MiddleClick"
									Command="{Binding ElementName=Window, Path=DataContext.CloseChatCommand}"
									CommandParameter="{Binding Name}" />
								<MouseBinding
									Gesture="CTRL+LeftClick"
									Command="{Binding ElementName=Window, Path=DataContext.CloseChatCommand}"
									CommandParameter="{Binding Name}" />
							</UIElement.InputBindings>
							<FrameworkElement.ContextMenu>
								<ContextMenu>
									<MenuItem
										Command="{Binding TogglePinnedCommand}">
										<FrameworkElement.Style>
											<Style
												BasedOn="{StaticResource MenuItem}"
												TargetType="{x:Type MenuItem}">
												<Setter
													Property="Header"
													Value="Pin Tab" />
												<Style.Triggers>
													<DataTrigger
														Value="True"
														Binding="{Binding IsPinned}">
														<Setter
															Property="Header"
															Value="Unpin Tab" />
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</FrameworkElement.Style>
									</MenuItem>
									<MenuItem
										Command="{Binding ToggleMuteChatCommand}">
										<FrameworkElement.Style>
											<Style
												BasedOn="{StaticResource MenuItem}"
												TargetType="{x:Type MenuItem}">
												<Setter
													Property="Header"
													Value="Mute Tab" />
												<Style.Triggers>
													<DataTrigger
														Value="True"
														Binding="{Binding IsMuted}">
														<Setter
															Property="Header"
															Value="Unmute Tab" />
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</FrameworkElement.Style>
									</MenuItem>
									<Separator />
									<MenuItem
										Header="Log"
										Command="{Binding LogCommand}" />
									<MenuItem
										Header="Casier"
										Command="{Binding CasierCommand}" />
									<MenuItem
										Header="Join"
										Command="{Binding JoinCommand}" />
									<Separator />
									<MenuItem
										Header="Temporarily Ignore"
										Command="{Binding IgnoreCommand}" />
									<MenuItem
										Header="Mumute"
										Command="{Binding MumuteCommand}" />
									<MenuItem
										Header="Kick"
										Command="{Binding KickCommand}" />
									<Separator />
									<MenuItem
										Header="Close All Whispers"
										Command="{Binding CloseAllWhispersCommand}" />
									<MenuItem
										Header="Close All Read Whispers"
										Command="{Binding CloseAllReadWhispersCommand}" />
									<Separator />
									<MenuItem
										Header="Close"
										Command="{Binding CloseChatCommand}" />
								</ContextMenu>
							</FrameworkElement.ContextMenu>
							<Grid>
								<Border
									Name="ChatTabContentBorder"
									CornerRadius="{DynamicResource ChatWindowChatTabInnerCornerRadius}"
									Margin="3,0,0,0">
									<FrameworkElement.Style>
										<Style
											TargetType="{x:Type Border}">
											<Setter
												Property="Background"
												Value="{DynamicResource ChatWindowChatTabBackgroundColor}" />
											<Style.Triggers>
												<DataTrigger
													Value="True"
													Binding="{Binding IsSelected}">
													<Setter
														Property="Background"
														Value="{DynamicResource ChatWindowChatTabSelectedBackgroundColor}" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</FrameworkElement.Style>
								</Border>
								<StackPanel
									Orientation="Horizontal"
									HorizontalAlignment="Center">
									<FrameworkElement.Style>
										<Style
											TargetType="{x:Type StackPanel}">
											<Style.Triggers>
												<DataTrigger
													Value="True"
													Binding="{Binding IsPreviousSelectedWhisper}">
													<Setter
														Property="Margin"
														Value="14,0" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</FrameworkElement.Style>
									<Image
										Source="{DynamicResource ChatWindowChatTabMutedImageSource}"
										Margin="4,0,0,0"
										Stretch="Uniform"
										Width="10">
										<FrameworkElement.Style>
											<Style
												TargetType="{x:Type Image}">
												<Setter
													Property="Visibility"
													Value="Collapsed" />
												<Setter
													Property="UIElement.SnapsToDevicePixels"
													Value="True" />
												<Style.Triggers>
													<DataTrigger
														Value="True"
														Binding="{Binding IsMuted}">
														<Setter
															Property="Visibility"
															Value="Visible" />
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</FrameworkElement.Style>
									</Image>
									<TextBlock
										Name="ChatTabNameText"
										Margin="4,4,1,4"
										TextAlignment="Center"
										Text="{Binding Name}"
										Foreground="{Binding TabNameColor, Converter={StaticResource HexStringToSolidColorBrushConverter}}" />
									<TextBlock
										Name="ChatTabCommunityText"
										Margin="1,4,4,4"
										TextAlignment="Center"
										Text="{Binding Community, StringFormat=[{0}]}"
										Foreground="{Binding TabNameColor, Converter={StaticResource HexStringToSolidColorBrushConverter}}">
										<FrameworkElement.Style>
											<Style
												TargetType="{x:Type TextBlock}">
												<Style.Triggers>
													<DataTrigger
														Binding="{Binding Community}"
														Value="{x:Null}">
														<Setter
															Property="Visibility"
															Value="Collapsed" />
													</DataTrigger>
													<DataTrigger
														Value="{x:Static system:String.Empty}"
														Binding="{Binding Community}">
														<Setter
															Property="Visibility"
															Value="Collapsed" />
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</FrameworkElement.Style>
									</TextBlock>
								</StackPanel>
								<Border
									HorizontalAlignment="Left"
									CornerRadius="{DynamicResource ChatWindowChatTabLastChatCornerRadius}"
									Width="14"
									Visibility="{Binding IsPreviousSelectedWhisper, Converter={StaticResource BooleanToVisibilityConverter}}">
									<TextBlock
										Text="&gt;"
										FontWeight="Bold"
										VerticalAlignment="Center"
										HorizontalAlignment="Center"
										Margin="6,0,0,0" />
								</Border>
							</Grid>
						</Border>
						<DataTemplate.Triggers>
							<DataTrigger
								Value="True"
								Binding="{Binding HasNewMessages}">
								<Setter
									TargetName="ChatTabContentBorder"
									Property="Background">
									<Setter.Value>
										<LinearGradientBrush
											StartPoint="0,0.5"
											EndPoint="1,0.5">
											<GradientStop
												Offset="0.02"
												Color="{Binding TabColor, Converter={StaticResource HexStringToColorConverter}}" />
											<GradientStop
												Color="#FFFF8200"
												Offset="0.15" />
										</LinearGradientBrush>
									</Setter.Value>
								</Setter>
								<Setter
									TargetName="ChatTabNameText"
									Property="Foreground"
									Value="#FFFFEA6B" />
								<Setter
									TargetName="ChatTabCommunityText"
									Property="Foreground"
									Value="#FFFFEA6B" />
							</DataTrigger>
							<DataTrigger
								Value="False"
								Binding="{Binding IsWhisper}">
								<Setter
									TargetName="ChatTabBorder"
									Property="FrameworkElement.ContextMenu">
									<Setter.Value>
										<ContextMenu>
											<MenuItem
												Command="{Binding ToggleMuteChatCommand}">
												<FrameworkElement.Style>
													<Style
														BasedOn="{StaticResource MenuItem}"
														TargetType="{x:Type MenuItem}">
														<Setter
															Property="Header"
															Value="Mute Tab" />
														<Style.Triggers>
															<DataTrigger
																Value="True"
																Binding="{Binding IsMuted}">
																<Setter
																	Property="Header"
																	Value="Unmute Tab" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</FrameworkElement.Style>
											</MenuItem>
											<Separator />
											<MenuItem
												Header="Close All Whispers"
												Command="{Binding CloseAllWhispersCommand}" />
											<MenuItem
												Header="Close All Read Whispers"
												Command="{Binding CloseAllReadWhispersCommand}" />
											<Separator />
											<MenuItem
												Header="Close"
												Command="{Binding CloseChatCommand}" />
										</ContextMenu>
									</Setter.Value>
								</Setter>
							</DataTrigger>
						</DataTemplate.Triggers>
					</DataTemplate>
				</ItemsControl.ItemTemplate>
			</ListBox>
		</DockPanel>
		<GridSplitter
			Grid.Column="1"
			Width="5"
			HorizontalAlignment="Stretch"
			Style="{DynamicResource GridSplitterStyle}" />
		<DockPanel
			Grid.Column="2">
			<DockPanel
				Dock="Bottom"
				Margin="4">
				<local:ImageButton
					DockPanel.Dock="Right"
					Width="20"
					Height="20"
					VerticalAlignment="Bottom"
					ImageWidth="12"
					ImageHeight="12"
					Image="{DynamicResource ChatWindowNoteImageSource}"
					ImageHover="{DynamicResource ChatWindowNoteHoverImageSource}"
					ImagePressed="{DynamicResource ChatWindowNotePressedImageSource}"
					Command="{Binding OpenNotesCommand}"
					CommandParameter="{Binding SelectedChat.Name}" />
				<TextBox
					Margin="0,0,4,0"
					Padding="3,0"
					Height="30"
					TextWrapping="Wrap"
					AcceptsReturn="True"
					ScrollViewer.HorizontalScrollBarVisibility="Disabled"
					ScrollViewer.VerticalScrollBarVisibility="Auto"
					Text="{Binding ChatText, UpdateSourceTrigger=PropertyChanged}">
					<UIElement.InputBindings>
						<KeyBinding
							Key="Enter"
							Command="{Binding SendChatCommand}" />
					</UIElement.InputBindings>
				</TextBox>
			</DockPanel>
			<local:ChatTextBox
				Name="ChatTextBox"
				ContextMenuOpening="ChatBoxContextMenuOpening"
				Background="#00FFFFFF"
				BorderThickness="0"
				Margin="0,0,4,0"
				IsReadOnly="True"
				SelectionBrush="#FF000000"
				VerticalScrollBarVisibility="Visible"
				ContextMenu="{x:Null}"
				ChatList="{Binding SelectedChat.ChatMessages}">
				<FrameworkElement.Resources>
					<ResourceDictionary>
						<Style
							TargetType="{x:Type Paragraph}"
							x:Key="{x:Type Paragraph}">
							<Setter
								Property="Block.Margin"
								Value="0" />
						</Style>
					</ResourceDictionary>
				</FrameworkElement.Resources>
			</local:ChatTextBox>
		</DockPanel>
	</Grid>
</local:PinnableWindow>
