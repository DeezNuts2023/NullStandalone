<local:PinnableWindow
	x:Class="tfmStandalone.ModopwetWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:tfmStandalone" xmlns:system="clr-namespace:System;assembly=mscorlib"
	Name="Window"
	Loaded="HandleLoaded"
	IsVisibleChanged="HandleIsVisibleChanged"
	Activated="HandleActivated"
	Icon="../Resources/Images/mp_icon.ico"
	Title="Modopwet"
	Height="400"
	Width="680"
	FontFamily="Calibri"
	FontSize="11">
	<FrameworkElement.Style>
		<Style
			BasedOn="{StaticResource PinnableWindowStyle}"
			TargetType="{x:Type local:PinnableWindow}">
			<Style.Resources>
				<ResourceDictionary>
					<CornerRadius
						x:Key="WindowCornerRadius">0</CornerRadius>
					<Thickness
						x:Key="WindowHeaderMargin">0</Thickness>
				</ResourceDictionary>
			</Style.Resources>
		</Style>
	</FrameworkElement.Style>
	<FrameworkElement.Resources>
		<ResourceDictionary>
			<Style
				TargetType="{x:Type Button}"
				BasedOn="{StaticResource HyperlinkButtonStyle}"
				x:Key="ActionButtonStyle">
				<Setter
					Property="HorizontalAlignment"
					Value="Center" />
			</Style>
			<Style
				TargetType="{x:Type Button}"
				x:Key="DropDownButtonStyle">
				<Setter
					Property="FrameworkElement.Cursor"
					Value="Hand" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type Button}">
							<Border
								Background="#00FFFFFF">
								<Path
									Name="Arrow"
									Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4"
									Fill="{DynamicResource ComboBoxToggleButtonDropDownPenColor}"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									RenderTransformOrigin="0.5,0.5" />
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										Value="{DynamicResource ComboBoxToggleButtonDropDownPenHoverColor}"
										TargetName="Arrow"
										Property="Fill" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type Button}"
				BasedOn="{StaticResource ActionButtonStyle}"
				x:Key="CaseActionButtonStyle">
				<Setter
					Property="FontSize"
					Value="11" />
				<Setter
					Property="Foreground"
					Value="{DynamicResource ModopwetReportActionForegroundColor}" />
				<Style.Triggers>
					<Trigger
						Property="UIElement.IsMouseOver"
						Value="True">
						<Setter
							Property="Foreground"
							Value="{DynamicResource ModopwetReportActionForegroundHoverColor}" />
						<Setter
							Property="Template">
							<Setter.Value>
								<ControlTemplate
									TargetType="{x:Type Button}">
									<FrameworkTemplate.Resources>
										<ResourceDictionary>
											<Style
												TargetType="{x:Type TextBlock}"
												x:Key="{x:Type TextBlock}">
												<Setter
													Property="TextDecorations"
													Value="Underline" />
											</Style>
										</ResourceDictionary>
									</FrameworkTemplate.Resources>
									<ContentPresenter />
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>
		</ResourceDictionary>
	</FrameworkElement.Resources>
	<DockPanel>
		<DockPanel
			Dock="Top"
			Height="18"
			Background="{DynamicResource ModopwetWindowHeaderBackgroundColor}">
			<FrameworkElement.Resources>
				<ResourceDictionary>
					<Style
						TargetType="{x:Type Button}"
						BasedOn="{StaticResource ActionButtonStyle}"
						x:Key="HeaderActionButtonStyle">
						<Setter
							Property="FontSize"
							Value="11" />
						<Setter
							Property="Foreground"
							Value="{DynamicResource ModopwetWindowHeaderItemForegroundColor}" />
						<Style.Triggers>
							<Trigger
								Property="UIElement.IsMouseOver"
								Value="True">
								<Setter
									Property="Foreground"
									Value="{DynamicResource ModopwetWindowHeaderItemForegroundHoverColor}" />
								<Setter
									Property="Template">
									<Setter.Value>
										<ControlTemplate
											TargetType="{x:Type Button}">
											<FrameworkTemplate.Resources>
												<ResourceDictionary>
													<Style
														TargetType="{x:Type TextBlock}"
														x:Key="{x:Type TextBlock}">
														<Setter
															Property="TextDecorations"
															Value="Underline" />
													</Style>
												</ResourceDictionary>
											</FrameworkTemplate.Resources>
											<ContentPresenter />
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Trigger>
						</Style.Triggers>
					</Style>
				</ResourceDictionary>
			</FrameworkElement.Resources>
			<Button
				DockPanel.Dock="Left"
				Content="ALL"
				VerticalAlignment="Center"
				Margin="20,0,0,0"
				CommandParameter="ALL"
				Command="{Binding SetCommunityCommand}">
				<FrameworkElement.Style>
					<Style
						BasedOn="{StaticResource HeaderActionButtonStyle}"
						TargetType="{x:Type Button}">
						<Style.Triggers>
							<DataTrigger
								Value="ALL"
								Binding="{Binding CurrentCommunity}">
								<Setter
									Property="Foreground"
									Value="{DynamicResource ModopwetWindowHeaderItemSelectedColor}" />
							</DataTrigger>
							<MultiDataTrigger>
								<MultiDataTrigger.Conditions>
									<Condition
										Value="ALL"
										Binding="{Binding CurrentCommunity}" />
									<Condition
										Value="True"
										Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" />
								</MultiDataTrigger.Conditions>
								<Setter
									Property="Foreground"
									Value="{DynamicResource ModopwetWindowHeaderItemSelectedHoverColor}" />
							</MultiDataTrigger>
						</Style.Triggers>
					</Style>
				</FrameworkElement.Style>
			</Button>
			<TextBlock
				DockPanel.Dock="Left"
				VerticalAlignment="Center"
				Text="-"
				Foreground="{DynamicResource ModopwetWindowHeaderItemSeparatorColor}"
				Margin="4,0,0,0" />
			<Button
				DockPanel.Dock="Left"
				VerticalAlignment="Center"
				Margin="4,0,0,0"
				Content="{Binding PrimaryCommunity}"
				Command="{Binding SetCommunityCommand}"
				CommandParameter="{Binding PrimaryCommunity}">
				<FrameworkElement.Style>
					<Style
						BasedOn="{StaticResource HeaderActionButtonStyle}"
						TargetType="{x:Type Button}">
						<Style.Triggers>
							<DataTrigger
								Value="True"
								Binding="{Binding IsCurrentCommunityPrimary}">
								<Setter
									Property="Foreground"
									Value="{DynamicResource ModopwetWindowHeaderItemSelectedColor}" />
							</DataTrigger>
							<MultiDataTrigger>
								<MultiDataTrigger.Conditions>
									<Condition
										Value="True"
										Binding="{Binding IsCurrentCommunityPrimary}" />
									<Condition
										Value="True"
										Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" />
								</MultiDataTrigger.Conditions>
								<Setter
									Property="Foreground"
									Value="{DynamicResource ModopwetWindowHeaderItemSelectedHoverColor}" />
							</MultiDataTrigger>
						</Style.Triggers>
					</Style>
				</FrameworkElement.Style>
			</Button>
			<TextBlock
				DockPanel.Dock="Left"
				VerticalAlignment="Center"
				Text="-"
				Foreground="{DynamicResource ModopwetWindowHeaderItemSeparatorColor}"
				Margin="4,0,0,0">
				<FrameworkElement.Style>
					<Style
						TargetType="{x:Type TextBlock}">
						<Style.Triggers>
							<DataTrigger
								Binding="{Binding SecondaryCommunity}"
								Value="{x:Null}">
								<Setter
									Property="Visibility"
									Value="Collapsed" />
							</DataTrigger>
							<DataTrigger
								Value="{x:Static system:String.Empty}"
								Binding="{Binding SecondaryCommunity}">
								<Setter
									Property="Visibility"
									Value="Collapsed" />
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</FrameworkElement.Style>
			</TextBlock>
			<Button
				DockPanel.Dock="Left"
				VerticalAlignment="Center"
				Margin="4,0,0,0"
				Content="{Binding SecondaryCommunity}"
				Command="{Binding SetCommunityCommand}"
				CommandParameter="{Binding SecondaryCommunity}">
				<FrameworkElement.Style>
					<Style
						BasedOn="{StaticResource HeaderActionButtonStyle}"
						TargetType="{x:Type Button}">
						<Style.Triggers>
							<DataTrigger
								Value="True"
								Binding="{Binding IsCurrentCommunitySecondary}">
								<Setter
									Property="Foreground"
									Value="{DynamicResource ModopwetWindowHeaderItemSelectedColor}" />
							</DataTrigger>
							<MultiDataTrigger>
								<MultiDataTrigger.Conditions>
									<Condition
										Value="True"
										Binding="{Binding IsCurrentCommunitySecondary}" />
									<Condition
										Value="True"
										Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" />
								</MultiDataTrigger.Conditions>
								<Setter
									Property="Foreground"
									Value="{DynamicResource ModopwetWindowHeaderItemSelectedHoverColor}" />
							</MultiDataTrigger>
						</Style.Triggers>
					</Style>
				</FrameworkElement.Style>
			</Button>
			<Button
				Name="CommunitySelectionDropDownButton"
				DockPanel.Dock="Left"
				Style="{StaticResource DropDownButtonStyle}"
				Margin="4,0,0,0"
				Command="{Binding OpenCommunitySelectionPopupCommand}" />
			<Popup
				Height="80"
				StaysOpen="False"
				PlacementTarget="{Binding ElementName=CommunitySelectionDropDownButton}"
				IsOpen="{Binding IsCommunitySelectionPopupOpen, Mode=TwoWay}">
				<Border
					Background="{DynamicResource ComboBoxPopupBackgroundColor}"
					BorderBrush="{DynamicResource ComboBoxPopupOuterBorderColor}"
					BorderThickness="{DynamicResource ComboBoxPopupOuterBorderThickness}">
					<Border
						BorderBrush="{DynamicResource ComboBoxPopupInnerBorderColor}"
						BorderThickness="{DynamicResource ComboBoxPopupInnerBorderThickness}">
						<ScrollViewer
							HorizontalScrollBarVisibility="Disabled"
							VerticalScrollBarVisibility="Auto">
							<ItemsControl
								ItemsSource="{Binding Communities}">
								<ItemsControl.ItemTemplate>
									<DataTemplate
										DataType="{x:Type local:ModopwetCommunityViewModel}">
										<Border>
											<StackPanel
												Orientation="Horizontal"
												HorizontalAlignment="Center">
												<FrameworkElement.Style>
													<Style
														TargetType="{x:Type StackPanel}">
														<Setter
															Property="Background"
															Value="#00FFFFFF" />
														<Style.Triggers>
															<Trigger
																Property="UIElement.IsMouseOver"
																Value="True">
																<Setter
																	Property="Background"
																	Value="#44000000" />
															</Trigger>
														</Style.Triggers>
													</Style>
												</FrameworkElement.Style>
												<UIElement.InputBindings>
													<MouseBinding
														MouseAction="LeftClick"
														Command="{Binding ElementName=Window, Path=DataContext.SetSecondaryCommunityCommand}"
														CommandParameter="{Binding}" />
												</UIElement.InputBindings>
												<TextBlock
													Margin="12,0,0,0"
													Text="{Binding Community}" />
												<TextBlock
													HorizontalAlignment="Center"
													Margin="2,0,12,0"
													Text="{Binding ReportCount, StringFormat=({0})}" />
											</StackPanel>
										</Border>
									</DataTemplate>
								</ItemsControl.ItemTemplate>
							</ItemsControl>
						</ScrollViewer>
					</Border>
				</Border>
			</Popup>
			<Button
				Name="SettingsPopupButton"
				DockPanel.Dock="Right"
				Style="{StaticResource HeaderActionButtonStyle}"
				Content="Settings"
				VerticalAlignment="Center"
				Margin="0,0,20,0"
				Command="{Binding OpenSettingsPopoupCommand}" />
			<Popup
				Placement="Left"
				StaysOpen="False"
				Width="220"
				PlacementTarget="{Binding ElementName=SettingsPopupButton}"
				IsOpen="{Binding IsSettingsPopupOpen, Mode=TwoWay}"
				VerticalOffset="{Binding ElementName=SettingsPopupButton, Path=ActualHeight}"
				HorizontalOffset="{Binding ElementName=SettingsPopupButton, Path=ActualWidth}">
				<Border
					Background="{DynamicResource ComboBoxPopupBackgroundColor}"
					BorderBrush="{DynamicResource ComboBoxPopupOuterBorderColor}"
					BorderThickness="{DynamicResource ComboBoxPopupOuterBorderThickness}">
					<Border
						BorderBrush="{DynamicResource ComboBoxPopupInnerBorderColor}"
						BorderThickness="{DynamicResource ComboBoxPopupInnerBorderThickness}">
						<StackPanel>
							<CheckBox
								Style="{StaticResource PushButtonStyle}"
								Content="Show One-Person Reports"
								FontSize="11"
								Margin="10"
								Padding="20,4"
								IsChecked="{Binding HasOnePersonReports, Mode=TwoWay}" />
							<CheckBox
								Style="{StaticResource PushButtonStyle}"
								Content="Report Notification"
								FontSize="11"
								Padding="20,4"
								Margin="10,0,10,2"
								IsChecked="{Binding IsGettingNotifications, Mode=TwoWay}" />
							<Border
								BorderBrush="{DynamicResource ModopwetNotificationsBorderColor}"
								BorderThickness="1"
								Margin="10,0"
								Visibility="Visible">
								<FrameworkElement.Style>
									<Style
										TargetType="{x:Type Border}">
										<Style.Triggers>
											<DataTrigger
												Value="False"
												Binding="{Binding IsGettingNotifications}">
												<Setter
													Property="Visibility"
													Value="Collapsed" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</FrameworkElement.Style>
								<DockPanel>
									<StackPanel
										DockPanel.Dock="Top"
										HorizontalAlignment="Right"
										Orientation="Horizontal"
										Margin="4,2">
										<Button
											Style="{StaticResource ActionButtonStyle}"
											Content="All"
											FontSize="10"
											Command="{Binding ToggleAllNotificationsCommand}" />
										<TextBlock
											DockPanel.Dock="Left"
											VerticalAlignment="Center"
											Text="-"
											Foreground="{DynamicResource ModopwetWindowHeaderItemSeparatorColor}"
											Margin="2,0" />
										<Button
											Style="{StaticResource ActionButtonStyle}"
											Content="None"
											FontSize="10"
											Command="{Binding ToggleNoneNotificationsCommand}" />
									</StackPanel>
									<ItemsControl
										Margin="4,2"
										ItemsSource="{Binding Communities}">
										<ItemsControl.ItemsPanel>
											<ItemsPanelTemplate>
												<WrapPanel
													Orientation="Horizontal" />
											</ItemsPanelTemplate>
										</ItemsControl.ItemsPanel>
										<ItemsControl.ItemTemplate>
											<DataTemplate
												DataType="{x:Type local:ModopwetCommunityViewModel}">
												<Border
													BorderBrush="#44000000"
													BorderThickness="1"
													CornerRadius="1"
													Margin="2,2">
													<FrameworkElement.Style>
														<Style
															TargetType="{x:Type Border}">
															<Setter
																Property="Background"
																Value="#00FFFFFF" />
															<Style.Triggers>
																<DataTrigger
																	Value="True"
																	Binding="{Binding IsMonitored}">
																	<Setter
																		Property="Background"
																		Value="#44000000" />
																</DataTrigger>
															</Style.Triggers>
														</Style>
													</FrameworkElement.Style>
													<UIElement.InputBindings>
														<MouseBinding
															MouseAction="LeftClick"
															Command="{Binding ElementName=Window, Path=DataContext.ToggleNotificationCommunityCommand}"
															CommandParameter="{Binding}" />
													</UIElement.InputBindings>
													<TextBlock
														Margin="6,2"
														Text="{Binding Community}" />
												</Border>
											</DataTemplate>
										</ItemsControl.ItemTemplate>
									</ItemsControl>
								</DockPanel>
							</Border>
							<Button
								Style="{StaticResource ActionButtonStyle}"
								Content="Close"
								HorizontalAlignment="Right"
								Margin="10,4"
								FontSize="10"
								Command="{Binding CloseSettingsPopupCommand}" />
						</StackPanel>
					</Border>
				</Border>
			</Popup>
			<TextBlock
				DockPanel.Dock="Right"
				VerticalAlignment="Center"
				Text="-"
				Foreground="{DynamicResource ModopwetWindowHeaderItemSeparatorColor}"
				Margin="0,0,4,0" />
			<Button
				Name="AutorefreshButton"
				DockPanel.Dock="Right"
				Content="Autorefresh"
				VerticalAlignment="Center"
				Margin="0,0,4,0"
				Command="{Binding ToggleAutoRefreshCommand}">
				<FrameworkElement.Style>
					<Style
						BasedOn="{StaticResource HeaderActionButtonStyle}"
						TargetType="{x:Type Button}">
						<Style.Triggers>
							<DataTrigger
								Value="True"
								Binding="{Binding IsAutoRefreshEnabled}">
								<Setter
									Property="Foreground"
									Value="{DynamicResource ModopwetWindowHeaderItemSelectedColor}" />
							</DataTrigger>
							<MultiDataTrigger>
								<MultiDataTrigger.Conditions>
									<Condition
										Value="True"
										Binding="{Binding IsAutoRefreshEnabled}" />
									<Condition
										Value="True"
										Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" />
								</MultiDataTrigger.Conditions>
								<Setter
									Property="Foreground"
									Value="{DynamicResource ModopwetWindowHeaderItemSelectedHoverColor}" />
							</MultiDataTrigger>
						</Style.Triggers>
					</Style>
				</FrameworkElement.Style>
			</Button>
			<Popup
				StaysOpen="False"
				PlacementTarget="{Binding ElementName=AutorefreshButton}"
				IsOpen="{Binding IsAutoRefreshPopupOpen, Mode=TwoWay}">
				<Border
					Background="{DynamicResource ComboBoxPopupBackgroundColor}"
					BorderBrush="{DynamicResource ComboBoxPopupOuterBorderColor}"
					BorderThickness="{DynamicResource ComboBoxPopupOuterBorderThickness}">
					<Border
						BorderBrush="{DynamicResource ComboBoxPopupInnerBorderColor}"
						BorderThickness="{DynamicResource ComboBoxPopupInnerBorderThickness}">
						<StackPanel>
							<FrameworkElement.Resources>
								<ResourceDictionary>
									<Style
										TargetType="{x:Type Border}"
										x:Key="{x:Type Border}">
										<Setter
											Property="Background"
											Value="#00FFFFFF" />
										<Style.Triggers>
											<Trigger
												Property="UIElement.IsMouseOver"
												Value="True">
												<Setter
													Property="Background"
													Value="#44000000" />
											</Trigger>
										</Style.Triggers>
									</Style>
								</ResourceDictionary>
							</FrameworkElement.Resources>
							<Border>
								<UIElement.InputBindings>
									<MouseBinding
										MouseAction="LeftClick"
										CommandParameter="30"
										Command="{Binding ElementName=Window, Path=DataContext.SetAutoRefreshTimeCommand}" />
								</UIElement.InputBindings>
								<TextBlock
									Text="30s"
									Margin="12,0" />
							</Border>
							<Border>
								<UIElement.InputBindings>
									<MouseBinding
										MouseAction="LeftClick"
										CommandParameter="60"
										Command="{Binding ElementName=Window, Path=DataContext.SetAutoRefreshTimeCommand}" />
								</UIElement.InputBindings>
								<TextBlock
									Text="1m"
									Margin="12,0" />
							</Border>
							<Border>
								<UIElement.InputBindings>
									<MouseBinding
										MouseAction="LeftClick"
										CommandParameter="120"
										Command="{Binding ElementName=Window, Path=DataContext.SetAutoRefreshTimeCommand}" />
								</UIElement.InputBindings>
								<TextBlock
									Text="2m"
									Margin="12,0" />
							</Border>
							<Border>
								<UIElement.InputBindings>
									<MouseBinding
										MouseAction="LeftClick"
										CommandParameter="300"
										Command="{Binding ElementName=Window, Path=DataContext.SetAutoRefreshTimeCommand}" />
								</UIElement.InputBindings>
								<TextBlock
									Text="5m"
									Margin="12,0" />
							</Border>
							<Border>
								<UIElement.InputBindings>
									<MouseBinding
										MouseAction="LeftClick"
										CommandParameter="600"
										Command="{Binding ElementName=Window, Path=DataContext.SetAutoRefreshTimeCommand}" />
								</UIElement.InputBindings>
								<TextBlock
									Text="10m"
									Margin="12,0" />
							</Border>
						</StackPanel>
					</Border>
				</Border>
			</Popup>
			<TextBlock
				DockPanel.Dock="Right"
				VerticalAlignment="Center"
				Text="-"
				Foreground="{DynamicResource ModopwetWindowHeaderItemSeparatorColor}"
				Margin="0,0,4,0" />
			<Button
				DockPanel.Dock="Right"
				Style="{StaticResource HeaderActionButtonStyle}"
				Content="Refresh"
				VerticalAlignment="Center"
				Margin="0,0,4,0"
				Command="{Binding RefreshCommand}" />
			<StackPanel
				Orientation="Horizontal"
				VerticalAlignment="Center"
				HorizontalAlignment="Center">
				<Button
					Content="Time"
					Command="{Binding SortByTimeCommand}">
					<FrameworkElement.Style>
						<Style
							BasedOn="{StaticResource HeaderActionButtonStyle}"
							TargetType="{x:Type Button}">
							<Style.Triggers>
								<DataTrigger
									Value="True"
									Binding="{Binding IsSortedByTime}">
									<Setter
										Property="Foreground"
										Value="{DynamicResource ModopwetWindowHeaderItemSelectedColor}" />
								</DataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition
											Value="True"
											Binding="{Binding IsSortedByTime}" />
										<Condition
											Value="True"
											Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" />
									</MultiDataTrigger.Conditions>
									<Setter
										Property="Foreground"
										Value="{DynamicResource ModopwetWindowHeaderItemSelectedHoverColor}" />
								</MultiDataTrigger>
							</Style.Triggers>
						</Style>
					</FrameworkElement.Style>
				</Button>
				<TextBlock
					Text="-"
					Foreground="{DynamicResource ModopwetWindowHeaderItemSeparatorColor}"
					Margin="4,0,4,0" />
				<Button
					Content="Count"
					Command="{Binding SortByCountCommand}">
					<FrameworkElement.Style>
						<Style
							BasedOn="{StaticResource HeaderActionButtonStyle}"
							TargetType="{x:Type Button}">
							<Style.Triggers>
								<DataTrigger
									Value="False"
									Binding="{Binding IsSortedByTime}">
									<Setter
										Property="Foreground"
										Value="{DynamicResource ModopwetWindowHeaderItemSelectedColor}" />
								</DataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition
											Value="False"
											Binding="{Binding IsSortedByTime}" />
										<Condition
											Value="True"
											Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" />
									</MultiDataTrigger.Conditions>
									<Setter
										Property="Foreground"
										Value="{DynamicResource ModopwetWindowHeaderItemSelectedHoverColor}" />
								</MultiDataTrigger>
							</Style.Triggers>
						</Style>
					</FrameworkElement.Style>
				</Button>
			</StackPanel>
		</DockPanel>
		<Grid
			Background="{DynamicResource ModopwetWindowReportListBackgroundColor}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition>
					<FrameworkContentElement.Style>
						<Style
							TargetType="{x:Type ColumnDefinition}">
							<Setter
								Property="Width"
								Value="400" />
							<Style.Triggers>
								<DataTrigger
									Binding="{Binding SelectedCase}"
									Value="{x:Null}">
									<Setter
										Property="Width"
										Value="*" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</FrameworkContentElement.Style>
				</ColumnDefinition>
				<ColumnDefinition>
					<FrameworkContentElement.Style>
						<Style
							TargetType="{x:Type ColumnDefinition}">
							<Setter
								Property="Width"
								Value="*" />
							<Style.Triggers>
								<DataTrigger
									Binding="{Binding SelectedCase}"
									Value="{x:Null}">
									<Setter
										Property="Width"
										Value="0" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</FrameworkContentElement.Style>
				</ColumnDefinition>
			</Grid.ColumnDefinitions>
			<ItemsControl
				Grid.Column="0"
				ItemsSource="{Binding Cases}">
				<ItemsControl.ItemsPanel>
					<ItemsPanelTemplate>
						<VirtualizingStackPanel />
					</ItemsPanelTemplate>
				</ItemsControl.ItemsPanel>
				<Control.Template>
					<ControlTemplate>
						<Border
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}"
							BorderBrush="{TemplateBinding BorderBrush}"
							Background="{TemplateBinding Background}"
							SnapsToDevicePixels="True">
							<ScrollViewer
								Padding="{TemplateBinding Padding}"
								Focusable="False"
								VerticalScrollBarVisibility="Auto">
								<ItemsPresenter
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</Border>
					</ControlTemplate>
				</Control.Template>
				<ItemsControl.ItemTemplate>
					<DataTemplate
						DataType="{x:Type local:CaseViewModel}">
						<Border
							BorderBrush="{DynamicResource ModopwetReportListItemBorderColor}"
							BorderThickness="0,0,1,1">
							<FrameworkElement.Style>
								<Style
									TargetType="{x:Type Border}">
									<Setter
										Property="Background"
										Value="#00FFFFFF" />
									<Style.Triggers>
										<DataTrigger
											Value="True"
											Binding="{Binding IsSameRoom}">
											<Setter
												Property="Background"
												Value="{DynamicResource ModopwetReportLocalBackgroundColor}" />
										</DataTrigger>
										<DataTrigger
											Value="True"
											Binding="{Binding IsSelected}">
											<Setter
												Property="Background"
												Value="{DynamicResource ModopwetReportSelectedBackgroundColor}" />
										</DataTrigger>
										<DataTrigger
											Value="True"
											Binding="{Binding IsDeleted}">
											<Setter
												Property="Background"
												Value="{DynamicResource ModopwetReportDeletedBackgroundColor}" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</FrameworkElement.Style>
							<UIElement.InputBindings>
								<MouseBinding
									MouseAction="LeftClick"
									Command="{Binding ElementName=Window, Path=DataContext.SelectCase}"
									CommandParameter="{Binding}" />
							</UIElement.InputBindings>
							<DockPanel
								Margin="4">
								<TextBlock
									DockPanel.Dock="Bottom"
									Margin="0,2,0,0"
									Foreground="{DynamicResource ModopwetReportSanctionForegroundColor}"
									FontStyle="Italic"
									TextWrapping="Wrap"
									Text="{Binding SanctionRemovalReason}">
									<FrameworkElement.Style>
										<Style
											TargetType="{x:Type TextBlock}">
											<Style.Triggers>
												<DataTrigger
													Binding="{Binding SanctionRemovalReason}"
													Value="{x:Null}">
													<Setter
														Property="Visibility"
														Value="Collapsed" />
												</DataTrigger>
												<DataTrigger
													Value="{x:Static system:String.Empty}"
													Binding="{Binding SanctionRemovalReason}">
													<Setter
														Property="Visibility"
														Value="Collapsed" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</FrameworkElement.Style>
								</TextBlock>
								<TextBlock
									DockPanel.Dock="Bottom"
									FontSize="10"
									Foreground="{DynamicResource ModopwetReportWatchersForegroundColor}"
									Text="{Binding CurrentWatchers, StringFormat=({0})}">
									<FrameworkElement.Style>
										<Style
											TargetType="{x:Type TextBlock}">
											<Style.Triggers>
												<DataTrigger
													Binding="{Binding CurrentWatchers}"
													Value="{x:Null}">
													<Setter
														Property="Visibility"
														Value="Collapsed" />
												</DataTrigger>
												<DataTrigger
													Value="{x:Static system:String.Empty}"
													Binding="{Binding CurrentWatchers}">
													<Setter
														Property="Visibility"
														Value="Collapsed" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</FrameworkElement.Style>
								</TextBlock>
								<StackPanel
									DockPanel.Dock="Left"
									VerticalAlignment="Center"
									Width="160">
									<StackPanel
										Orientation="Horizontal">
										<TextBox
											BorderBrush="#00FFFFFF"
											Background="#00FFFFFF"
											BorderThickness="0"
											IsReadOnly="True"
											FontSize="22"
											FontWeight="Thin"
											Foreground="{DynamicResource ModopwetReportNameForegroundColor}"
											Style="{x:Null}"
											FocusVisualStyle="{x:Null}"
											Text="{Binding Name}" />
										<StackPanel
											DockPanel.Dock="Right"
											VerticalAlignment="Center"
											Margin="4,0,0,0"
											HorizontalAlignment="Left">
											<TextBlock
												DockPanel.Dock="Left"
												FontFamily="Calibri"
												FontSize="11"
												Foreground="{DynamicResource ModopwetReportCommunityForegroundColor}"
												Text="{Binding Community, StringFormat=[{0}]}" />
											<TextBlock
												DockPanel.Dock="Left"
												FontFamily="Calibri"
												FontSize="11"
												Foreground="{DynamicResource ModopwetReportHoursForegroundColor}"
												Text="{Binding Hours, StringFormat={}{0}h}" />
										</StackPanel>
									</StackPanel>
									<DockPanel>
										<Image
											DockPanel.Dock="Left"
											Source="{DynamicResource ModopwetReportRoomLockImageSource}"
											Width="8"
											Height="8"
											Margin="0,0,2,0">
											<FrameworkElement.Style>
												<Style
													TargetType="{x:Type Image}">
													<Style.Triggers>
														<DataTrigger
															Value="False"
															Binding="{Binding IsRoomLocked}">
															<Setter
																Property="Visibility"
																Value="Collapsed" />
														</DataTrigger>
													</Style.Triggers>
												</Style>
											</FrameworkElement.Style>
										</Image>
										<Image
											DockPanel.Dock="Left"
											Source="{DynamicResource ModopwetReportRoomHouseImageSource}"
											Width="8"
											Height="8"
											Margin="0,0,2,0">
											<FrameworkElement.Style>
												<Style
													TargetType="{x:Type Image}">
													<Style.Triggers>
														<DataTrigger
															Value="False"
															Binding="{Binding IsRoomTribehouse}">
															<Setter
																Property="Visibility"
																Value="Collapsed" />
														</DataTrigger>
													</Style.Triggers>
												</Style>
											</FrameworkElement.Style>
										</Image>
										<TextBlock
											DockPanel.Dock="Top"
											TextTrimming="CharacterEllipsis"
											LineStackingStrategy="BlockLineHeight"
											HorizontalAlignment="Left"
											LineHeight="10"
											MaxHeight="20"
											TextWrapping="Wrap"
											FontSize="10"
											Foreground="{DynamicResource ModopwetReportRoomForegroundColor}"
											Text="{Binding Room}"
											ToolTip="{Binding Room}" />
									</DockPanel>
								</StackPanel>
								<StackPanel
									DockPanel.Dock="Right"
									VerticalAlignment="Center">
									<FrameworkElement.Style>
										<Style
											TargetType="{x:Type StackPanel}">
											<Style.Triggers>
												<DataTrigger
													Value="True"
													Binding="{Binding IsDeleted}">
													<Setter
														Property="Visibility"
														Value="Hidden" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</FrameworkElement.Style>
									<Button
										Style="{StaticResource CaseActionButtonStyle}"
										Content="[follow]"
										Command="{Binding ElementName=Window, Path=DataContext.FollowCommand}"
										CommandParameter="{Binding}" />
									<Button
										Style="{StaticResource CaseActionButtonStyle}"
										Content="[ibanhack]"
										Command="{Binding ElementName=Window, Path=DataContext.IbanhackCommand}"
										CommandParameter="{Binding}" />
									<Button
										Style="{StaticResource CaseActionButtonStyle}"
										Content="[handle]"
										Command="{Binding ElementName=Window, Path=DataContext.HandleCommand}"
										CommandParameter="{Binding}" />
									<Button
										Style="{StaticResource CaseActionButtonStyle}"
										Content="[casier]"
										Command="{Binding ElementName=Window, Path=DataContext.CasierCommand}"
										CommandParameter="{Binding}" />
								</StackPanel>
								<StackPanel
									DockPanel.Dock="Right"
									VerticalAlignment="Center">
									<FrameworkElement.Style>
										<Style
											TargetType="{x:Type StackPanel}">
											<Style.Triggers>
												<DataTrigger
													Value="True"
													Binding="{Binding IsDeleted}">
													<Setter
														Property="Visibility"
														Value="Hidden" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</FrameworkElement.Style>
									<Button
										Style="{StaticResource CaseActionButtonStyle}"
										Content="[watch]"
										Command="{Binding ElementName=Window, Path=DataContext.WatchCommand}"
										CommandParameter="{Binding}" />
									<Button
										Style="{StaticResource CaseActionButtonStyle}"
										Content="[banhack]"
										Command="{Binding ElementName=Window, Path=DataContext.BanhackCommand}"
										CommandParameter="{Binding}" />
									<Button
										Style="{StaticResource CaseActionButtonStyle}"
										Content="[delete]"
										Command="{Binding ElementName=Window, Path=DataContext.DeleteCommand}"
										CommandParameter="{Binding}" />
									<Button
										Style="{StaticResource CaseActionButtonStyle}"
										Content="[profile]"
										Command="{Binding ElementName=Window, Path=DataContext.ProfileCommand}"
										CommandParameter="{Binding}" />
								</StackPanel>
								<DockPanel
									VerticalAlignment="Center"
									HorizontalAlignment="Center">
									<TextBlock
										DockPanel.Dock="Bottom"
										FontSize="11"
										Foreground="{DynamicResource ModopwetReportTypesForegroundColor}"
										Text="{Binding ReportTypes}" />
									<StackPanel
										Orientation="Horizontal"
										HorizontalAlignment="Center">
										<TextBlock
											FontFamily="{StaticResource Aspergit}"
											FontSize="26"
											Height="26"
											FontWeight="Bold"
											Text="{Binding Reports.Count}">
											<FrameworkElement.Style>
												<Style
													TargetType="{x:Type TextBlock}">
													<Style.Triggers>
														<DataTrigger
															Value="0"
															Binding="{Binding ReportSeverity}">
															<Setter
																Property="Foreground"
																Value="#FF00FF1B" />
														</DataTrigger>
														<DataTrigger
															Value="1"
															Binding="{Binding ReportSeverity}">
															<Setter
																Property="Foreground"
																Value="#FFC7FF00" />
														</DataTrigger>
														<DataTrigger
															Value="2"
															Binding="{Binding ReportSeverity}">
															<Setter
																Property="Foreground"
																Value="#FFFF7E00" />
														</DataTrigger>
														<DataTrigger
															Value="3"
															Binding="{Binding ReportSeverity}">
															<Setter
																Property="Foreground"
																Value="#FFFF410B" />
														</DataTrigger>
														<DataTrigger
															Value="4"
															Binding="{Binding ReportSeverity}">
															<Setter
																Property="Foreground"
																Value="#FFFF0000" />
														</DataTrigger>
													</Style.Triggers>
												</Style>
											</FrameworkElement.Style>
											<UIElement.Effect>
												<DropShadowEffect
													BlurRadius="2"
													ShadowDepth="0" />
											</UIElement.Effect>
										</TextBlock>
										<StackPanel
											VerticalAlignment="Center"
											Margin="4,0,0,0">
											<TextBlock
												DockPanel.Dock="Left"
												FontSize="11"
												Foreground="{DynamicResource ModopwetReportTimesForegroundColor}"
												Text="{Binding NewestReportTime, StringFormat={}{0}m}" />
											<TextBlock
												DockPanel.Dock="Left"
												FontSize="11"
												Foreground="{DynamicResource ModopwetReportTimesForegroundColor}"
												Text="{Binding OldestReportTime, StringFormat={}{0}m}" />
										</StackPanel>
									</StackPanel>
								</DockPanel>
							</DockPanel>
						</Border>
					</DataTemplate>
				</ItemsControl.ItemTemplate>
			</ItemsControl>
			<Grid
				Column="1"
				Background="{DynamicResource ModopwetReportDetailsBackgroundColor}">
				<FrameworkElement.Resources>
					<ResourceDictionary>
						<Style
							TargetType="{x:Type TextBox}"
							x:Key="{x:Type TextBox}">
							<Setter
								Property="Background"
								Value="#00FFFFFF" />
							<Setter
								Property="BorderBrush"
								Value="#00FFFFFF" />
							<Setter
								Property="BorderThickness"
								Value="0" />
							<Setter
								Property="Foreground"
								Value="{DynamicResource TextBoxForegroundColor}" />
							<Setter
								Property="FontFamily"
								Value="{DynamicResource TextBoxFontFamily}" />
							<Setter
								Property="FontSize"
								Value="{DynamicResource ModopwetReportDetailsFontSize}" />
							<Setter
								Property="TextBoxBase.IsReadOnly"
								Value="True" />
							<Setter
								Property="TextBox.TextWrapping"
								Value="Wrap" />
							<Setter
								Property="FrameworkElement.FocusVisualStyle"
								Value="{x:Null}" />
						</Style>
					</ResourceDictionary>
				</FrameworkElement.Resources>
				<Grid.RowDefinitions>
					<RowDefinition />
					<RowDefinition
						Height="3" />
					<RowDefinition />
				</Grid.RowDefinitions>
				<DockPanel
					Grid.Row="0">
					<TextBlock
						DockPanel.Dock="Top"
						Text="Reports"
						Margin="4,2,4,0"
						FontSize="13"
						Foreground="{DynamicResource ModopwetReportDetailsSectionHeaderColor}" />
					<ScrollViewer
						HorizontalScrollBarVisibility="Disabled"
						VerticalScrollBarVisibility="Auto">
						<ItemsControl
							Margin="0,4,0,6"
							BorderBrush="#00FFFFFF"
							BorderThickness="0"
							ItemsSource="{Binding SelectedCase.Reports}">
							<ItemsControl.ItemTemplate>
								<DataTemplate
									DataType="{x:Type local:ReportViewModel}">
									<DockPanel
										Margin="6,2,6,0">
										<StackPanel
											DockPanel.Dock="Top"
											Orientation="Horizontal">
											<TextBlock
												Text="•" />
											<TextBlock
												Margin="2,0,0,0"
												HorizontalAlignment="Center"
												Foreground="{DynamicResource ModopwetReportTimesForegroundColor}"
												Text="{Binding Age, StringFormat={}{0}m}" />
											<TextBlock
												Text="["
												Margin="2,0,0,0"
												HorizontalAlignment="Center"
												Foreground="{DynamicResource ModopwetReportTypesForegroundColor}" />
											<TextBlock
												HorizontalAlignment="Center"
												Foreground="{DynamicResource ModopwetReportTypesForegroundColor}"
												Text="{Binding Type}" />
											<TextBlock
												Text="]"
												HorizontalAlignment="Center"
												Foreground="{DynamicResource ModopwetReportTypesForegroundColor}" />
											<TextBlock
												Margin="2,0,0,0"
												Foreground="{DynamicResource ModopwetReportDetailsReporterNameColor}"
												Text="{Binding ReporterName}" />
											<TextBlock
												Margin="2,0,0,0"
												Foreground="{DynamicResource ModopwetReportDetailsReporterKarmaColor}"
												Text="{Binding ReporterKarma, StringFormat=({0})}" />
										</StackPanel>
										<TextBox
											FontSize="{DynamicResource ModopwetReportDetailsFontSize}"
											Margin="10,0,0,0"
											Foreground="{DynamicResource ModopwetReportDetailsReporterCommentColor}"
											Text="{Binding Comment}">
											<FrameworkElement.Style>
												<Style
													BasedOn="{StaticResource TextBox}"
													TargetType="{x:Type TextBox}">
													<Style.Triggers>
														<DataTrigger
															Binding="{Binding Comment}"
															Value="{x:Null}">
															<Setter
																Property="Visibility"
																Value="Collapsed" />
														</DataTrigger>
														<DataTrigger
															Value="{x:Static system:String.Empty}"
															Binding="{Binding Comment}">
															<Setter
																Property="Visibility"
																Value="Collapsed" />
														</DataTrigger>
													</Style.Triggers>
												</Style>
											</FrameworkElement.Style>
										</TextBox>
									</DockPanel>
								</DataTemplate>
							</ItemsControl.ItemTemplate>
						</ItemsControl>
					</ScrollViewer>
				</DockPanel>
				<GridSplitter
					Grid.Row="1"
					Height="1"
					HorizontalAlignment="Stretch"
					VerticalAlignment="Center"
					Background="{DynamicResource ModopwetWindowHeaderItemSeparatorColor}" />
				<DockPanel
					Grid.Row="2">
					<TextBlock
						DockPanel.Dock="Top"
						Text="Chat Log"
						Margin="4,2,4,0"
						FontSize="13"
						Foreground="{DynamicResource ModopwetReportDetailsSectionHeaderColor}" />
					<TextBox
						Padding="6"
						ScrollViewer.HorizontalScrollBarVisibility="Disabled"
						ScrollViewer.VerticalScrollBarVisibility="Auto"
						Text="{Binding SelectedCase.ChatLog}" />
				</DockPanel>
			</Grid>
		</Grid>
	</DockPanel>
</local:PinnableWindow>
